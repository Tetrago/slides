from manim import *
from manim_slides import Slide


class Main(Slide):

    def title(self):
        title = Text("Binary Exploitation", font_size=56)
        left = Line([0, 0, 0], [-4, 0, 0])
        right = Line([0, 0, 0], [4, 0, 0])

        self.play(Create(left), Create(right))
        self.play(FadeIn(title), title.animate.shift(UP * 0.3),
                  left.animate.shift(DOWN * 0.3),
                  right.animate.shift(DOWN * 0.3))
        self.next_slide()
        self.play(Uncreate(title), Uncreate(left), Uncreate(right))

    def program_stack(self):
        title = Text("Program Stack").to_edge(UP, buff=0.5)
        stack = Rectangle(height=5, width=4)

        self.play(Create(stack), Write(title))

        top = Line(stroke_opacity=0).move_to(stack, UP)
        top.width = 4

        bp_arrow = Arrow(start=LEFT, end=RIGHT)
        bp_text = Text("Base Pointer", font_size=16).next_to(bp_arrow, LEFT)
        bp = Group(bp_arrow, bp_text).next_to(top, LEFT)

        sp_arrow = Arrow(start=RIGHT, end=LEFT)
        sp_text = Text("Stack Pointer", font_size=16).next_to(sp_arrow, RIGHT)
        sp = Group(sp_arrow, sp_text).next_to(top, RIGHT)

        self.play(Create(bp_arrow), AddTextLetterByLetter(bp_text),
                  Create(sp_arrow), AddTextLetterByLetter(sp_text))
        self.next_slide()

        frames = []
        group = Group(stack, top, bp, sp)

        def push_frame(name, color, height=1):
            rect = Rectangle(height=height,
                             width=4,
                             fill_opacity=1,
                             fill_color=color)

            text = Text(name, font_size=24).move_to(rect)
            frame = VGroup(rect, text).to_edge(RIGHT, buff=1)

            if len(frames) == 0:
                frame.move_to(stack, UP)
            else:
                frame.next_to(frames[-1][1], DOWN, buff=0)

            top = Line(stroke_opacity=0).move_to(rect, UP)
            top.width = 4

            bottom = Line(stroke_opacity=0).move_to(rect, DOWN)
            bottom.width = 4

            if len(frames) != 0:
                self.play(bp.animate.next_to(top, LEFT))

            self.play(GrowFromEdge(frame.stretch_to_fit_width(4), UP),
                      sp.animate.next_to(bottom, RIGHT))

            group.add(top)
            group.add(frame)
            group.add(bottom)

            frames.append((top, frame, bottom))

        def pop_frame():
            frame = frames[-1]
            frames.pop()

            self.play(sp.animate.next_to(frame[0], RIGHT), FadeOut(frame[1]))

            group.remove(frame[0])
            group.remove(frame[1])
            group.remove(frame[2])

            if len(frames) == 0:
                self.play(bp.animate.next_to(top, LEFT))
            else:
                self.play(bp.animate.next_to(frames[-1][0], LEFT))

        push_frame("Main", "#E6194B")
        self.next_slide()

        push_frame("Function A", "#3CB44B")
        push_frame("Function B", "#FFE119", 2)
        push_frame("Function C", "#4363D8", 0.5)
        self.next_slide()

        pop_frame()
        self.next_slide()

        pop_frame()
        pop_frame()
        pop_frame()
        self.next_slide()

        bp_arrow = Arrow(start=LEFT, end=RIGHT, buff=0.8)
        bp_text = Text("rbp", font_size=16).next_to(bp_arrow, LEFT)
        bp_group = Group(bp_arrow, bp_text).next_to(top, LEFT)

        sp_arrow = Arrow(start=RIGHT, end=LEFT, buff=0.8)
        sp_text = Text("rsp", font_size=16).next_to(sp_arrow, RIGHT)
        sp_group = Group(sp_arrow, sp_text).next_to(top, RIGHT)

        self.play(ReplacementTransform(bp, bp_group),
                  ReplacementTransform(sp, sp_group))

        group.remove(bp)
        bp = bp_group
        group.add(bp)

        group.remove(sp)
        sp = sp_group
        group.add(sp)

        src = Code("program_stack.asm",
                   insert_line_no=False,
                   font="Monaspace Neon",
                   background_stroke_width=0,
                   font_size=20).to_edge(RIGHT, buff=-3)

        self.play(group.animate.to_edge(LEFT, buff=1.5),
                  src.animate.to_edge(RIGHT, buff=1))
        self.next_slide()

        push_frame("main", "#E6194B")
        push_frame("procedure", "#3CB44B")
        self.next_slide()

        pop_frame()
        pop_frame()
        self.next_slide()

        self.play(FadeOut(group), FadeOut(src), Unwrite(title))

    def stack_frame(self):
        title = Text("Stack Frame").to_edge(UP, buff=0.5)
        self.play(Write(title))

        rect = Rectangle(width=4, height=5)
        self.play(Create(rect))

        hlines = VGroup(
            *[Line([-2.0, 0.0, 0.0], [2.0, 0.0, 0.0])
              for _ in range(10)]).arrange(DOWN, buff=0.5).move_to(rect, UP)

        hlabels = VGroup(*[
            Text(f'0x7f..{0xff-i*8:02x}',
                 font_size=18,
                 font="Monaspace Neon",
                 color="#666666") for i in range(10)
        ]).arrange(DOWN, buff=0.3).next_to(rect, LEFT)

        vlines = Group(
            *[Line([0.0, 2.5, 0.0], [0.0, -2.5, 0.0])
              for _ in range(8)]).arrange(LEFT, buff=0.5).move_to(rect, RIGHT)

        vlabels = Group(*[
            Text(f'{i}', font_size=18, color="#666666", font="Monaspace Neon")
            for i in range(8)
        ]).arrange(LEFT, buff=0.38).next_to(rect, UP, buff=0.1)

        group = Group(rect, hlines, hlabels, vlines, vlabels)

        self.play(LaggedStartMap(Create, hlines, lag_ratio=0.2),
                  LaggedStartMap(Create, hlabels, lag_ratio=0.2))

        self.play(LaggedStartMap(Create, vlines, lag_ratio=0.2),
                  LaggedStartMap(Create, vlabels, lag_ratio=0.2))

        self.next_slide()

        src = Code("stack_frame.c",
                   insert_line_no=False,
                   font="Monaspace Neon",
                   background_stroke_width=0,
                   font_size=20).to_edge(RIGHT, buff=1)

        self.play(group.animate.to_edge(LEFT, buff=1.5))
        self.play(AddTextWordByWord(src))
        self.next_slide()

        rip_rect = Rectangle(width=4,
                             height=0.5,
                             fill_color="#E6194B",
                             fill_opacity=1)
        rip_text = Text("rip", font_size=22).move_to(rip_rect)
        rip = Group(rip_rect, rip_text).move_to(rect, UP)

        self.play(FadeIn(rip_rect), FadeIn(rip_text))
        self.next_slide()

        rbp_rect = Rectangle(width=4,
                             height=0.5,
                             fill_color="#3CB44B",
                             fill_opacity=1)
        rbp_text = Text("rbp", font_size=22).move_to(rbp_rect)
        rbp = Group(rbp_rect, rbp_text).move_to(rect, UP).shift(DOWN * 0.5)

        self.play(FadeIn(rbp_rect), FadeIn(rbp_text))
        self.next_slide()

        valid_rect = Rectangle(width=0.5,
                               height=0.5,
                               fill_color="#FFE119",
                               fill_opacity=1).move_to(
                                   rect, UP).shift(LEFT * 1.75 + DOWN)
        self.play(FadeIn(valid_rect))
        self.next_slide()

        magic_number_rect = Rectangle(width=2,
                                      height=0.5,
                                      fill_color="#4363D8",
                                      fill_opacity=1)
        magic_number_labels = Group(*[
            Text(v, font_size=18, font="Monaspace Neon")
            for v in ["12", "34", "56", "78"]
        ]).arrange(LEFT, buff=0.23).move_to(magic_number_rect,
                                            RIGHT).shift(LEFT * 0.1)
        magic_number = Group(magic_number_rect, magic_number_labels).move_to(
            rect, UP).shift(DOWN + RIGHT)

        self.play(FadeIn(magic_number_rect),
                  LaggedStartMap(FadeIn, magic_number_labels, lag_ratio=0.2))
        self.next_slide()

        input_1 = Rectangle(width=4,
                            height=0.5,
                            fill_color="#FFE119",
                            fill_opacity=1).move_to(rect, UP).shift(DOWN * 1.5)
        input_2 = Rectangle(width=2,
                            height=0.5,
                            fill_color="#FFE119",
                            fill_opacity=1).move_to(rect,
                                                    UP).shift(DOWN * 2 + LEFT)
        input_3 = Line([-2, 0, 0], [0, 0, 0], stroke_color="#FFE119").move_to(
            rect, UP).shift(DOWN * 2 + LEFT)
        self.play(FadeIn(input_1), FadeIn(input_2), FadeIn(input_3))
        self.next_slide()

        pointless = Rectangle(width=4,
                              height=0.5,
                              fill_color="#4363D8",
                              fill_opacity=1).move_to(rect,
                                                      UP).shift(DOWN * 2.5)
        self.play(FadeIn(pointless))
        self.next_slide()

        self.play(
            title.animate.shift(LEFT * 20),
            group.animate.shift(LEFT * 20),
            src.animate.shift(LEFT * 20),
            rip.animate.shift(LEFT * 20),
            rbp.animate.shift(LEFT * 20),
            valid_rect.animate.shift(LEFT * 20),
            magic_number.animate.shift(LEFT * 20),
            input_1.animate.shift(LEFT * 20),
            input_2.animate.shift(LEFT * 20),
            input_3.animate.shift(LEFT * 20),
            pointless.animate.shift(LEFT * 20),
        )

    def buffer_overflow(self):
        title = Text("Buffer Overflow")
        self.play(Write(title))
        self.next_slide()

        self.play(title.animate.to_edge(UP, buff=1))

        buffer_rect = Rectangle(width=8, height=0.5)
        buffer_lines = Group(
            *[Line([0, 0.25, 0], [0, -0.25, 0]) for _ in range(16)]).arrange(
                RIGHT, buff=0.5).move_to(buffer_rect, LEFT)

        self.play(
            LaggedStart(Create(buffer_rect),
                        LaggedStartMap(Create, buffer_lines, lag_ratio=0.2),
                        lag_ratio=0.4))
        self.next_slide()

        buffer_obj = Rectangle(width=0.01,
                               height=0.5,
                               fill_color="#E6194B",
                               fill_opacity=1).shift(LEFT * 4)
        self.play(buffer_obj.animate.shift(RIGHT * 2).stretch_to_fit_width(4))
        self.play(buffer_obj.animate.shift(RIGHT * 2).stretch_to_fit_width(8))
        self.play(buffer_obj.animate.shift(LEFT * 3).stretch_to_fit_width(2))
        self.next_slide()

        label_arrow = Arrow(start=DOWN, end=UP).next_to(buffer_rect,
                                                        DOWN).shift(LEFT * 4)
        label = Text('char* buffer', font="Monaspace Neon",
                     font_size=18).next_to(label_arrow, DOWN)

        src = Code("buffer_overflow.c",
                   insert_line_no=False,
                   font="Monaspace Neon",
                   background_stroke_width=0,
                   font_size=24).to_edge(DOWN)

        buffer_labels = Group(
            *[
                Text(f"{x:x}", font_size=18, font="Monaspace Neon")
                for x in range(16)
            ], ).arrange(RIGHT, buff=0.375).move_to(
                buffer_rect, LEFT).shift(UP * 0.5 + RIGHT * 0.2)

        self.play(Create(src))
        self.play(Create(label_arrow), Create(label))
        self.play(LaggedStartMap(Create, buffer_labels, lag_ratio=0.2))
        self.next_slide()

        overlap_line = Line([0, 0.25, 0],
                            [0, -0.25, 0]).move_to(buffer_rect, RIGHT)
        self.add(overlap_line)

        self.play(buffer_obj.animate.shift(RIGHT * 5).stretch_to_fit_width(12))
        self.next_slide()

        self.play(Uncreate(title), Uncreate(buffer_rect),
                  AnimationGroup(*[Uncreate(x) for x in buffer_lines]),
                  Uncreate(buffer_obj), Uncreate(label_arrow), Uncreate(label),
                  Uncreate(src),
                  AnimationGroup(*[Uncreate(x) for x in buffer_labels]),
                  Uncreate(overlap_line))

    def basic_examples(self):
        src = Code("example1.c",
                   insert_line_no=False,
                   font="Monaspace Neon",
                   background_stroke_width=0,
                   font_size=24)

        self.play(Create(src))
        self.wait(0.25)
        self.next_slide()

        out = Code("example1.txt",
                   insert_line_no=False,
                   font="Monaspace Neon",
                   font_size=24).to_edge(RIGHT, buff=2)

        self.play(src.animate.to_edge(LEFT, buff=2))
        self.play(FadeIn(out))
        self.next_slide()

        self.play(src.animate.to_edge(LEFT, buff=-7),
                  out.animate.to_edge(RIGHT, buff=-7))

        src = Code("example2.c",
                   insert_line_no=False,
                   font="Monaspace Neon",
                   background_stroke_width=0,
                   font_size=24)

        self.play(Create(src))
        self.wait(0.25)
        self.next_slide()

        buffer_rect = Rectangle(width=4,
                                height=2,
                                fill_color="#FFE119",
                                fill_opacity=1)
        buffer_label = Text("buffer", font_size=22).move_to(buffer_rect)
        buffer = VGroup(buffer_rect, buffer_label)

        rbp_rect = Rectangle(width=4,
                             height=0.5,
                             fill_color="#3CB44B",
                             fill_opacity=1)
        rbp_label = Text("rbp", font_size=22).move_to(rbp_rect)
        rbp = VGroup(rbp_rect, rbp_label).next_to(buffer, UP, buff=0)

        rip_rect = Rectangle(width=4,
                             height=0.5,
                             fill_color="#E6194B",
                             fill_opacity=1)
        rip_label = Text("rip", font_size=22).move_to(rip_rect)
        rip = VGroup(rip_rect, rip_label).next_to(rbp, UP, buff=0)

        stack = VGroup(buffer, rbp, rip).to_edge(RIGHT, buff=1).shift(UP * 0.5)

        self.play(src.animate.to_edge(LEFT, buff=1.5))
        self.play(
            LaggedStart(AnimationGroup(FadeIn(buffer_rect),
                                       FadeIn(buffer_label)),
                        AnimationGroup(FadeIn(rbp_rect), FadeIn(rbp_label)),
                        AnimationGroup(FadeIn(rip_rect), FadeIn(rip_label)),
                        lag_ratio=0.2))
        self.next_slide()

        rbp_over = Rectangle(width=4,
                             height=0.5,
                             fill_color="#000000",
                             fill_opacity=1).move_to(rbp)

        win_rect = Rectangle(width=4,
                             height=0.5,
                             fill_color="#4363D8",
                             fill_opacity=1).move_to(rip)
        win_label = Text("win", font_size=22).move_to(win_rect)

        self.play(
            LaggedStart(
                AnimationGroup(ReplacementTransform(rbp_rect, rbp_over),
                               Uncreate(rbp_label)),
                AnimationGroup(ReplacementTransform(rip_rect, win_rect),
                               ReplacementTransform(rip_label, win_label)),
                lag_ratio=0.2))
        self.next_slide()

        self.play(Uncreate(src), Uncreate(buffer_rect), Uncreate(buffer_label),
                  Uncreate(rbp_over), Uncreate(win_rect), Uncreate(win_label))

    def basic_pwntools(self):
        title = Text("pwntools")
        self.play(Write(title))
        self.next_slide()

        pip = Text("python3 -m pip install pwntools",
                   font="Monaspace Neon",
                   font_size=22,
                   fill_opacity=0)

        apt = Text("apt install python3-pwntools",
                   font="Monaspace Neon",
                   font_size=22).shift(DOWN)

        self.play(title.animate.shift(UP * 0.5),
                  pip.animate.shift(DOWN * 0.5).set_opacity(1))
        self.play(ReplacementTransform(pip.copy(), apt))
        self.next_slide()

        self.play(FadeOut(title), FadeOut(pip), FadeOut(apt))

        src = Code("basic_pwntools.py",
                   insert_line_no=False,
                   font="Monaspace Neon",
                   background_stroke_width=0,
                   font_size=24)
        self.play(Create(src))
        self.wait(0.25)
        self.next_slide()

    def construct(self):
        #self.title()
        #self.program_stack()
        #self.stack_frame()
        #self.buffer_overflow()
        #self.basic_examples()
        self.basic_pwntools()

        self.wait()
